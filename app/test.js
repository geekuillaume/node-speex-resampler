"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
// const {promisify} = require('util');
const perf_hooks_1 = require("perf_hooks");
const path_1 = __importDefault(require("path"));
const index_1 = __importStar(require("./index"));
const assert = (condition, message) => {
    if (!condition) {
        throw new Error(message);
    }
};
const audioTests = [
    { inFile: path_1.default.resolve(__dirname, `../resources/24000hz_mono_test.pcm`), inRate: 24000, outRate: 48000, channels: 1, quality: 5 },
    { inFile: path_1.default.resolve(__dirname, `../resources/24000hz_test.pcm`), inRate: 24000, outRate: 24000, channels: 2, quality: 5 },
    { inFile: path_1.default.resolve(__dirname, `../resources/24000hz_test.pcm`), inRate: 24000, outRate: 48000, channels: 2, quality: 10 },
    { inFile: path_1.default.resolve(__dirname, `../resources/44100hz_test.pcm`), inRate: 44100, outRate: 48000, channels: 2 },
    { inFile: path_1.default.resolve(__dirname, `../resources/44100hz_test.pcm`), inRate: 44100, outRate: 48000, channels: 2, quality: 10 },
    { inFile: path_1.default.resolve(__dirname, `../resources/44100hz_test.pcm`), inRate: 44100, outRate: 48000, channels: 2, quality: 1 },
    { inFile: path_1.default.resolve(__dirname, `../resources/44100hz_test.pcm`), inRate: 44100, outRate: 24000, channels: 2, quality: 5 },
];
const promiseBasedTest = async () => {
    await index_1.default.initPromise;
    for (const audioTest of audioTests) {
        console.log(`Resampling file ${audioTest.inFile} with ${audioTest.channels} channel(s) from ${audioTest.inRate}Hz to ${audioTest.outRate}Hz (quality: ${audioTest.quality || 7})`);
        const resampler = new index_1.default(audioTest.channels, audioTest.inRate, audioTest.outRate, audioTest.quality);
        const filename = path_1.default.parse(audioTest.inFile).name;
        const pcmData = fs_1.readFileSync(audioTest.inFile);
        const start = perf_hooks_1.performance.now();
        const res = await resampler.processChunk(pcmData);
        const end = perf_hooks_1.performance.now();
        console.log(`Resampled in ${Math.floor(end - start)}ms`);
        console.log(`Input stream: ${pcmData.length} bytes, ${pcmData.length / audioTest.inRate / 2 / audioTest.channels}s`);
        console.log(`Output stream: ${res.length} bytes, ${res.length / audioTest.outRate / 2 / audioTest.channels}s`);
        const inputDuration = pcmData.length / audioTest.inRate / 2 / audioTest.channels;
        const outputDuration = res.length / audioTest.outRate / 2 / audioTest.channels;
        assert(Math.abs(inputDuration - outputDuration) < 0.01, `Stream duration not matching target, in: ${inputDuration}s != out:${outputDuration}`);
        console.log();
        // writeFileSync(path.resolve(__dirname, `../resources/${filename}_${audioTest.outRate}_${audioTest.quality || 7}_output.pcm`), res);
    }
};
const streamBasedTest = async () => {
    console.log('=================');
    console.log('Tranform Stream Test');
    console.log('=================');
    for (const audioTest of audioTests) {
        console.log(`Resampling file ${audioTest.inFile} with ${audioTest.channels} channel(s) from ${audioTest.inRate}Hz to ${audioTest.outRate}Hz (quality: ${audioTest.quality || 7})`);
        const readFileStream = fs_1.createReadStream(audioTest.inFile);
        const transformStream = new index_1.SpeexResamplerTransform(audioTest.channels, audioTest.inRate, audioTest.outRate, audioTest.quality);
        let pcmData = Buffer.alloc(0);
        readFileStream.on('data', (d) => {
            pcmData = Buffer.concat([pcmData, d]);
        });
        let res = Buffer.alloc(0);
        transformStream.on('data', (d) => {
            res = Buffer.concat([res, d]);
        });
        const start = perf_hooks_1.performance.now();
        readFileStream.pipe(transformStream);
        await new Promise((r) => transformStream.on('end', r));
        const end = perf_hooks_1.performance.now();
        console.log(`Resampled in ${Math.floor(end - start)}ms`);
        console.log(`Input stream: ${pcmData.length} bytes, ${pcmData.length / audioTest.inRate / 2 / audioTest.channels}s`);
        console.log(`Output stream: ${res.length} bytes, ${res.length / audioTest.outRate / 2 / audioTest.channels}s`);
        const inputDuration = pcmData.length / audioTest.inRate / 2 / audioTest.channels;
        const outputDuration = res.length / audioTest.outRate / 2 / audioTest.channels;
        assert(Math.abs(inputDuration - outputDuration) < 0.01, `Stream duration not matching target, in: ${inputDuration}s != out:${outputDuration}`);
        console.log();
    }
};
promiseBasedTest()
    .then(() => streamBasedTest()).catch((e) => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,